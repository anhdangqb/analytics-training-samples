//// -- bigquery-public-data.hacker_news
//// -- version: 2022-08-30  

// Creating tables
Table hacker_news.full_201510 {
  id int [pk, unique]
  time int
  by string 
  score int
  title string
  type string 
  url string 
  text string
  parent int
  deleted boolean
  dead boolean
  descendants int [note: 'Number of story descendants']
  ranking int
  Indexes {
    (id) [unique]
  }
}

Table hacker_news.stories {
  id int [pk, unique]
  by string [note: 'Username of submitter']
  score int
  time int 
  time_ts timestamp
  title string
  url string
  text string 
  deleted boolean
  dead boolean
  descendants int
  author string [note: 'Username of author']
  Indexes {
    (id) [unique]
  }
}

Table hacker_news.comments {
  id int [pk, unique]
  by string [note: 'Username of commentors']
  author string [note: 'Username of author']
  time int
  time_ts timestamp
  text string
  parent int
  deleted boolean
  dead boolean
  ranking int
  Indexes {
    (id) [unique]
  }
}

// Creating references
// You can also define relaionship separately
// > many-to-one; < one-to-many; - one-to-one; <> many-to-many
Ref: hacker_news.full_201510.id < hacker_news.full_201510.parent

Ref: hacker_news.stories.id - hacker_news.full_201510.id
Ref: hacker_news.comments.id - hacker_news.full_201510.id

Ref: hacker_news.stories.id < hacker_news.comments.parent
Ref: hacker_news.stories.author <> hacker_news.comments.author

// To be more specific, keys in stories and comment should be mapped back to full_201510
// Though for the sake of simplicity, we skipped these
// Ref: hacker_news.stories.id < hacker_news.full_201510.parent
//----------------------------------------------//

